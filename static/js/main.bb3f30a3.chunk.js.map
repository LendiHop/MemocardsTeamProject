{"version":3,"sources":["m1-ui/n4-features/f0-404/Error404.module.css","reportWebVitals.ts","m3-dal/auth-api.ts","m0-utils/error-utils.ts","m2-bll/b1-reducers/app-reduser.ts","m2-bll/b1-reducers/profile-reducer.ts","m2-bll/b1-reducers/auth-reducer.ts","m3-dal/packs-api.ts","m2-bll/b1-reducers/packs-reducer.ts","m3-dal/cards-api.ts","m2-bll/b1-reducers/cards-reduser.ts","m2-bll/b0-store/redux-store.ts","m1-ui/n4-features/f0-404/Error404.tsx","m1-ui/n4-features/f1-auth/a3-passwordRecovery/PasswordRecovery.tsx","m1-ui/n4-features/f1-auth/a4-NewPassword/NewPassword.tsx","m1-ui/n4-features/f1-auth/a4-NewPassword/NewPasswordContainer.tsx","logo.svg","m1-ui/n4-features/f4-modals/Modal.tsx","m1-ui/n4-features/f4-modals/UpdateProfileModalContainer.tsx","m1-ui/n4-features/f1-auth/a5-profile/Profile.tsx","m1-ui/n4-features/f1-auth/a2-registration/Registration.tsx","m1-ui/n4-features/f1-auth/a2-registration/RegistrationContainer.tsx","m1-ui/n4-features/f1-auth/a1-login/Login.tsx","m1-ui/n4-features/f1-auth/a1-login/LoginContainer.tsx","m1-ui/n4-features/f1-auth/a3-passwordRecovery/CheckOnEmail.tsx","m1-ui/n4-features/f4-modals/UpdatePackModalContainer.tsx","m1-ui/n4-features/f2-packsList/p5-sort/SortArrow.tsx","m1-ui/n4-features/f4-modals/DeletePackModalContainer.tsx","m1-ui/n4-features/f2-packsList/p3-tables/PacksTable.tsx","m1-ui/n4-features/f2-packsList/p2-search/Search.tsx","m1-ui/n4-features/f4-modals/AddPackModalContainer.tsx","m1-ui/n4-features/f2-packsList/p4-packsSettings/MyPacksSetter.tsx","m1-ui/n4-features/f2-packsList/p4-packsSettings/RangeSlider.tsx","m1-ui/n4-features/f2-packsList/p1-pages/PacksList.tsx","m1-ui/n4-features/f4-modals/UpdateCardsModalContainer.tsx","m1-ui/n4-features/f4-modals/DeleteCardModalContainer.tsx","m1-ui/n4-features/f2-packsList/p3-tables/CardsTable.tsx","m1-ui/n4-features/f4-modals/AddCardsModalContainer.tsx","m1-ui/n4-features/f2-packsList/p1-pages/CardsList.tsx","m1-ui/n4-features/f3-learning/LearnPage.tsx","m1-ui/n3-routes/Routes.tsx","m1-ui/n2-header/Header.tsx","m1-ui/n0-errorSnackbar/ErrorSnackbar.tsx","m1-ui/n1-app/App.tsx","index.tsx","m1-ui/n4-features/f1-auth/a1-login/Login.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","authAPI","post","res","data","name","avatar","put","delete","email","from","message","password","token","resetPasswordToken","handleServerNetworkError","e","dispatch","error","response","console","log","setAppErrorAC","setAppStatusAC","initialState","status","isInitialized","type","_id","publicCardPacksCount","created","Date","updated","isAdmin","verified","rememberMe","setProfileData","showCheckEmail","isNewPassword","isRegistered","isLoggedIn","setIsLoggedIn","value","authForgotAC","isShowCheckEmailAC","authReducer","state","action","packsAPI","params","get","cardsPack","id","cardPacks","user_id","user_name","path","cardsCount","grade","shots","rating","__v","cardPacksTotalCount","maxCardsCount","minCardsCount","min","max","page","searchQuery","sort","pageCount","setSearchQuery","setPage","getCardPacksTC","getState","packName","packs","sortPacks","cards","privatCards","profile","setPacksData","catch","alert","cardsApi","card","card_id","ON_CHANGE_PRIVATE","UPDATE_CARD_GRADE","SET_SEARCH_BY_QUESTION_QUERY","SET_SEARCH_BY_ANSWER_QUERY","SET_PAGE","SET_PAGE_COUNT","answer","question","cardsPack_id","cardsTotalCount","maxGrade","minGrade","packUserId","SearchByQuestionQuery","SearchByAnswerQuery","onChangePrivateAC","updateCardGradeAC","setSearchByQuestionQuery","setSearchByAnswerQuery","setCardsPage","getCardsTC","cardsPackId","a","cardAnswer","cardQuestion","reducers","combineReducers","app","auth","filter","p","PageCount","map","store","createStore","composeWithDevTools","applyMiddleware","thunk","Error404","className","s","container","rail","stamp","four","zero","world","forward","box","wall","PasswordRecovery","useDispatch","useSelector","formikForgotAuth","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","to","Grid","item","xs","zeroMinWidth","direction","justifyContent","alignItems","Paper","elevation","style","padding","borderRadius","width","margin","handleSubmit","FormControl","FormLabel","FormGroup","TextField","label","getFieldProps","touched","color","Button","onClick","variant","marginTop","marginLeft","Typography","Link","href","NewPassword","formik","showPass","handleClickShowPassword","height","textAlign","InputLabel","htmlFor","Input","endAdornment","position","IconButton","aria-label","Visibility","VisibilityOff","NewPasswordContainer","useState","setShowPass","useParams","length","createNewPassThunk","Container","maxHeight","Modal","enableBackground","backgroundStyle","backgroundOnClick","modalStyle","modalOnClick","show","children","top","left","background","opacity","zIndex","display","flexFlow","UpdateProfileModalContainer","setShow","profileName","avatarUrl","updatedUser","spacing","useStyles","makeStyles","theme","createStyles","root","paper","minWidth","Profile","classes","showUpdateProfileModal","setShowUpdateProfileModal","LinearProgress","Avatar","alt","src","logo","gutterBottom","fontSize","Registration","showPass1","handleClickShowPassword1","showPass2","handleClickShowPassword2","password2","RegistrationContainer","setShowPass1","setShowPass2","Error","Login","formGroup","FormControlLabel","control","Checkbox","checked","forgot","loginBtn","singUpQ","singUp","LoginContainer","CheckOnEmail","UpdatePackModalContainer","packId","SortArrow","DeletePackModalContainer","deletePack","StyledTableCell","withStyles","head","backgroundColor","palette","primary","main","common","white","body","TableCell","StyledTableRow","hover","TableRow","PacksTable","props","showUpdatePackModal","setShowUpdatePackModal","showDeletePackModal","setShowDeletePackModal","currentPackData","setCurrentPackData","deletePackHandler","useCallback","updatePackHandler","TableContainer","component","Table","TableHead","align","TableBody","pack","scope","toString","slice","disabled","userId","input","flex","iconButton","SearchInput","placeholder","handleChange","handleEnter","handleClick","InputBase","onChange","inputProps","onKeyDown","AddPackModalContainer","addNewPack","MyPacksSetter","ButtonGroup","disableElevation","RangeSlider","React","setValue","Slider","onMouseUp","event","newValue","aria-labelledby","valueLabelDisplay","marginBottom","pagination","flexGrow","PacksList","useEffect","showAddPackModal","setShowAddPackModal","inputValue","setInputValue","addPackHandler","key","target","TablePagination","count","onPageChange","newPage","rowsPerPage","onRowsPerPageChange","parseInt","UpdateCardsModalContainer","cardId","updateCard","updateCardsTC","TextareaAutosize","minRows","DeleteCardModalContainer","CardsTable","showUpdateCardsModal","setShowUpdateCardsModal","showDeleteCardModal","setShowDeleteCardModal","currentCardData","setCurrentCardData","deleteCardHandler","updateCardHandler","AddCardsModalContainer","postCard","CardsList","inputQuestionValue","setInputQuestionValue","inputAnswerValue","setInputAnswerValue","showAddCardsModal","setShowAddCardsModal","addCardHandler","getCard","sum","reduce","acc","rand","Math","random","i","newSum","maxWidth","LearnPage","isChecked","setIsChecked","first","setFirst","more_id","setCard","RadioGroup","defaultValue","Radio","updateGradeTC","PATH","Routes","exact","strict","render","title","Header","anchorEl","setAnchorEl","open","Boolean","handleClose","logoutHandler","AppBar","Toolbar","aria-controls","aria-haspopup","startIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","Alert","ErrorSnackbar","reason","Snackbar","autoHideDuration","severity","App","createTheme","dark","light","secondary","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb3f30a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error404_container__10HtB\",\"rail\":\"Error404_rail__1kLuO\",\"stamp\":\"Error404_stamp__6NgXq\",\"stampSlide\":\"Error404_stampSlide__3N1Bd\",\"world\":\"Error404_world__1ODis\",\"forward\":\"Error404_forward__1YA3L\",\"slide\":\"Error404_slide__3qEBz\",\"box\":\"Error404_box__1sQ8f\",\"roll\":\"Error404_roll__2QhkP\",\"wall\":\"Error404_wall__3Fdeg\",\"zeroFour\":\"Error404_zeroFour__1v8f9\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import axios from \"axios\";\r\nimport { ProfileDataType } from \"../m2-bll/b1-reducers/profile-reducer\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    // baseURL: 'http://localhost:7542/2.0/',\r\n});\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post<ProfileDataType>('auth/me').then(res => res.data)\r\n    },\r\n    editProfile(name?: string, avatar?: string) {\r\n        return instance.put('auth/me', {name, avatar}).then(res => res.data)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ProfileDataType>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<{info: string, error: string}>('auth/me');\r\n    },\r\n    forgot(email: string) {\r\n        return instance.post<PassResponseType>(`auth/forgot`, {email,\r\n            from: \"test-front-admin <ai73a@yandex.by>\", message:`<div style=\"background-color: lime; padding: 15px\"><a href='http://localhost:3000/#/set-new-password/$token$'>\\t\\t\\n' +\r\n        '\\tlink</a></div>` }).then(res => res.data)\r\n    },\r\n    register(email: string, password: string) {\r\n        return instance.post<RegisterResponseType>('auth/register', {email, password}).then(res => res.data)\r\n    },\r\n    setNewPass(password: string, token: string ) {\r\n        return instance.post<PassResponseType>('auth/set-new-password/',\r\n            {password, resetPasswordToken: token}).then(res => res.data)\r\n    }\r\n}\r\n\r\n//types\r\n\r\ntype PassResponseType = {\r\n    info: string\r\n    error?: string\r\n}\r\n\r\ntype RegisterResponseType = {\r\n    addedUser: any\r\n    error?: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}","\r\nimport { Dispatch } from 'redux';\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../m2-bll/b1-reducers/app-reduser\";\r\n\r\n\r\n// generic function\r\n// export const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n//     if (data.messages.length) {\r\n//         dispatch(setAppErrorAC(data.messages[0]))\r\n//     } else {\r\n//         dispatch(setAppErrorAC('Some error occurred'))\r\n//     }\r\n//     dispatch(setAppStatusAC('failed'))\r\n// }\r\n\r\nexport const handleServerNetworkError = (e: any, dispatch: ErrorUtilsDispatchType) => {\r\n    const error = e.response\r\n        ? e.response.data.error\r\n        : (e.message + ', more details in the console');\r\n    console.log(error)\r\n    dispatch(setAppErrorAC(error))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport type ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>","import {Dispatch} from \"redux\"\r\nimport {authAPI} from \"../../m3-dal/auth-api\";\r\nimport {handleServerNetworkError} from \"../../m0-utils/error-utils\";\r\nimport {setProfileData} from \"./profile-reducer\";\r\nimport {setIsLoggedIn} from \"./auth-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'succeeded' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nexport type AppInitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: AppInitialStateType = initialState, action: AppActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\n\r\nexport const initializeAppTC = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const data = await authAPI.me()\r\n\r\n        dispatch(setIsLoggedIn(true))\r\n        dispatch(setProfileData(data))\r\n\r\n        dispatch(setAppStatusAC('succeeded'))\r\n\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n    finally {\r\n        dispatch(setIsInitializedAC(true))\r\n    }\r\n}\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetIsInitializedAC = ReturnType<typeof setIsInitializedAC>\r\n\r\nexport type AppActionsType = SetAppStatusActionType | SetAppErrorActionType | SetIsInitializedAC\r\n\r\n\r\n","import {authAPI} from \"../../m3-dal/auth-api\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reduser\";\r\nimport {handleServerNetworkError} from \"../../m0-utils/error-utils\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst initialState: ProfileDataType = {\r\n    _id: \"\",\r\n    email: \"\",\r\n    name: \"\",\r\n    avatar: \"\",\r\n    publicCardPacksCount: 0,\r\n    created: new Date(2013, 2, 1, 0, 70),\r\n    updated: new Date(2015, 2, 1, 0, 70),\r\n    isAdmin: false,\r\n    verified: false ,\r\n    rememberMe: false,\r\n    error: \"\",\r\n}\r\n\r\nexport const profileReducer = (state: ProfileDataType = initialState, action: ActionsType): ProfileDataType => {\r\n    switch (action.type) {\r\n        case 'profile/SET-PROFILE-DATA':\r\n            return {...state, ...action.data}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\n\r\nexport const setProfileData = (data: ProfileDataType) =>\r\n    ({type: 'profile/SET-PROFILE-DATA', data} as const)\r\n\r\n//thunk\r\nexport const editProfileTC = (name?: string, avatar?: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.editProfile(name, avatar)\r\n        .then(res => {\r\n            dispatch(setProfileData(res.updatedUser))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch ((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\n\r\n//types\r\n\r\nexport type ProfileDataType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number // количество колод\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean // подтвердил ли почту\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setProfileData>\r\ntype ThunkDispatch = Dispatch<ActionsType | ReturnType<typeof setAppStatusAC> | SetAppErrorActionType | SetAppStatusActionType>","import { Dispatch } from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../../m3-dal/auth-api\";\r\nimport {setProfileData} from \"./profile-reducer\";\r\nimport {handleServerNetworkError} from \"../../m0-utils/error-utils\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reduser\";\r\n\r\nconst initialState: InitialStateType = {\r\n    message: '',\r\n    showCheckEmail: false,\r\n    isNewPassword: true,\r\n    isRegistered: false,\r\n    isLoggedIn: false\r\n};\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        case 'FORGOT-PASSWORD':\r\n            return {...state, email: action.email}\r\n        case \"AUTH/CHANGE-REGISTRATION\":\r\n            return {\r\n                ...state,\r\n                isRegistered: true\r\n            }\r\n        case \"IS-LINK-ON-EMAIL\":\r\n            return {\r\n                ...state, showCheckEmail: action.showCheckEmail\r\n            }\r\n        case \"AUTH/CREATE-NEW-PASSWORD\":\r\n            return {...state, isNewPassword: action.isNewPassword}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\n\r\nexport const setIsLoggedIn = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\nexport const onRegistrationAC = () =>\r\n    ({type: \"AUTH/CHANGE-REGISTRATION\"} as const)\r\n\r\nexport const createNewPasswordAC = (isNewPassword: boolean) =>\r\n    ({type: \"AUTH/CREATE-NEW-PASSWORD\", isNewPassword} as const)\r\n\r\nexport const authForgotAC = (email: string) =>\r\n    ({type: 'FORGOT-PASSWORD', email} as const)\r\n\r\nexport const isShowCheckEmailAC = (showCheckEmail: boolean) =>\r\n    ({type: 'IS-LINK-ON-EMAIL', showCheckEmail} as const)\r\n\r\n\r\n//thunks\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            dispatch(setIsLoggedIn(true))\r\n            dispatch(setProfileData(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch ((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(() => {\r\n            dispatch(setIsLoggedIn(false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch ((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\n\r\nexport const onRegisterTC = (email: string, password: string) => async (dispatch: ThunkDispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n\r\n        await authAPI.register(email, password)\r\n\r\n        dispatch(onRegistrationAC())\r\n        dispatch(setAppStatusAC('succeeded'))\r\n\r\n    } catch (e) {\r\n        if (e && email) {\r\n            dispatch(onRegistrationAC())\r\n        }\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\n\r\nexport const ForgotThunk = (email: string) => async (dispatch: ThunkDispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        await authAPI.forgot(email)\r\n\r\n        dispatch(authForgotAC(email))\r\n        dispatch(isShowCheckEmailAC(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n    catch(e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\n\r\nexport const createNewPassThunk = (password: string, token: string) => async (dispatch: ThunkDispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        await authAPI.setNewPass(password, token)\r\n\r\n        dispatch(createNewPasswordAC(false))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\n\r\n//types\r\ntype InitialStateType = {\r\n    message: string\r\n    showCheckEmail: boolean\r\n    isNewPassword: boolean\r\n    isRegistered: boolean\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof onRegistrationAC>\r\n    | ReturnType<typeof setIsLoggedIn>\r\n    | ReturnType<typeof isShowCheckEmailAC>\r\n    | ReturnType<typeof authForgotAC>\r\n    | ReturnType<typeof createNewPasswordAC>\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | ReturnType<typeof setProfileData> | ReturnType<typeof setAppStatusAC> | SetAppErrorActionType | SetAppStatusActionType>\r\n\r\nexport default authReducer;","import {instance} from \"./auth-api\";\r\n\r\nexport const packsAPI = {\r\n    getPacks(params: packsParamsType) {\r\n        return instance.get(`cards/pack`, {params}\r\n        ).then(res => res.data)\r\n    },\r\n    addPack(data: AddedPackType) {\r\n        return instance.post('cards/pack', {cardsPack: data}).then(res => res.data)\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`cards/pack?id=${id}`).then(res => res.data)\r\n    },\r\n    updatePack(cardsPack: UpdatedPackType) {\r\n        return instance.put('cards/pack', {cardsPack}).then(res => res.data)\r\n    },\r\n}\r\n\r\n//types\r\n\r\nexport type UpdatedPackType = {\r\n    _id: string\r\n    name?: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: string\r\n    private?: boolean\r\n    type?: string\r\n}\r\n\r\nexport type AddedPackType = {\r\n    name: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: string\r\n    private?: boolean\r\n    type?: string\r\n}\r\n\r\nexport type packsParamsType = {\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n    packName?: string\r\n}","import {AddedPackType, packsAPI, packsParamsType, UpdatedPackType} from \"../../m3-dal/packs-api\";\r\nimport {AppRootStateType} from \"../b0-store/redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst initialState: PacksDataType = {\r\n    cardPacks: [\r\n        {\r\n            _id: \"\",\r\n            user_id: \"\",\r\n            user_name: \"\",\r\n            name: \"\",\r\n            path: \"\",\r\n            cardsCount: 0,\r\n            grade: 0, // средняя оценка карточек\r\n            shots: 0, // количество попыток\r\n            rating: 0, // лайки\r\n            type: \"\", // ещё будет \"folder\" (папка)\r\n            created: new Date(2013, 2, 1, 0, 70),\r\n            updated: new Date(2014, 2, 1, 0, 70),\r\n            __v: 0\r\n        },\r\n    ],\r\n    cardPacksTotalCount: 14, // количество колод\r\n    maxCardsCount: 103, //constant max value of cards\r\n    minCardsCount: 0, //constant min value of cards\r\n\r\n    min: 0,\r\n    max: 100,\r\n\r\n    page: 1, // выбранная страница\r\n    searchQuery: \"\",\r\n    sort: false,\r\n    pageCount: 10, // количество элементов на странице\r\n}\r\n\r\nexport const packsReducer = (state: PacksDataType = initialState, action: ActionsType): PacksDataType => {\r\n    switch (action.type) {\r\n        case 'packs/SET-PACKS-DATA':\r\n        case 'packs/ADD-NEW-PACK':\r\n        case 'packs/UPDATE-PACK':\r\n            return {...state, ...action.data}\r\n        case 'packs/DELETE-PACK':\r\n            return {...state, cardPacks: state.cardPacks.filter(p => p._id !== action.id)}\r\n        case 'packs/SET-PAGE':\r\n            return {...state, page: action.page}\r\n        case 'packs/SET-PAGE-COUNT':\r\n            return {...state, pageCount: action.PageCount}\r\n        case 'packs/SET-MIN-MAX-VALUES':\r\n            return {...state, min: action.min, max: action.max}\r\n        case 'packs/SET-SEARCH-QUERY':\r\n            return {...state, searchQuery: action.value}\r\n        case 'packs/SET-SORT-VALUE':\r\n            return {...state, sort: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//slider action\r\n\r\nexport const setMinMaxValues = (values: number[]) =>\r\n    ({type: 'packs/SET-MIN-MAX-VALUES', min: values[0], max: values[1]} as const)\r\n\r\n//sort action\r\nexport const setPacksSortValue = (value: boolean) =>\r\n    ({type: 'packs/SET-SORT-VALUE', value} as const)\r\n\r\n//search action\r\nexport const setSearchQuery = (value: string) =>\r\n    ({type: 'packs/SET-SEARCH-QUERY', value} as const)\r\n\r\n//pagination actions\r\nexport const setPage = (page: number) =>\r\n    ({type: 'packs/SET-PAGE', page} as const)\r\n\r\nexport const setPageCount = (PageCount: number) =>\r\n    ({type: 'packs/SET-PAGE-COUNT', PageCount} as const)\r\n\r\n//packs actions\r\nexport const setPacksData = (data: PacksDataType) =>\r\n    ({type: 'packs/SET-PACKS-DATA', data} as const)\r\n\r\nexport const addNewPack = (data: AddedPackType) =>\r\n    ({type: 'packs/ADD-NEW-PACK', data} as const)\r\n\r\nexport const deletePack = (id: string) =>\r\n    ({type: 'packs/DELETE-PACK', id} as const)\r\n\r\nexport const updatePack = (data: UpdatedPackType) =>\r\n    ({type: 'packs/UPDATE-PACK', data} as const)\r\n\r\n//thunks\r\nexport const getCardPacksTC = (): ThunkType => (dispatch, getState) => {\r\n    const state = getState()\r\n\r\n    let params: packsParamsType = {\r\n        packName: state.packs.searchQuery,\r\n        min: state.packs.min,\r\n        max: state.packs.max,\r\n        page: state.packs.page,\r\n        pageCount: state.packs.pageCount,\r\n        sortPacks: +state.packs.sort + \"updated\",\r\n    }\r\n\r\n    if (state.cards.privatCards) {\r\n        params = {...params, user_id: state.profile._id}\r\n    } \r\n\r\n    packsAPI.getPacks(params)\r\n        .then(data => {\r\n            dispatch(setPacksData(data))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            alert(error);\r\n            console.log('Error: ', {...e})\r\n        })\r\n}\r\n\r\nexport const addCardPackTC = (data: AddedPackType): ThunkType => (dispatch) => {\r\n    packsAPI.addPack(data)\r\n        .then(data => {\r\n            dispatch(addNewPack(data))\r\n            dispatch(getCardPacksTC())\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            alert(error);\r\n            console.log('Error: ', {...e})\r\n        })\r\n}\r\n\r\nexport const deleteCardPackTC = (id: string): ThunkType => (dispatch) => {\r\n    packsAPI.deletePack(id)\r\n        .then((data) => {\r\n            dispatch(deletePack(id))\r\n            dispatch(getCardPacksTC())\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            alert(error);\r\n            console.log('Error: ', {...e})\r\n        })\r\n}\r\n\r\nexport const updateCardPackTC = (data: UpdatedPackType): ThunkType =>\r\n    (dispatch) => {\r\n\r\n    packsAPI.updatePack(data)\r\n        .then(() => {\r\n            dispatch(getCardPacksTC())\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            alert(error);\r\n            console.log('Error: ', {...e})\r\n        })\r\n}\r\n\r\n//types\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\nexport type CardPackType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    name: string\r\n    path: string\r\n    cardsCount: number\r\n    grade: number // средняя оценка карточек\r\n    shots: number // количество попыток\r\n    rating: number // лайки\r\n    type: string // ещё будет \"folder\" (папка)\r\n    created: Date\r\n    updated: Date\r\n    __v: number\r\n}\r\n\r\ntype PacksDataType = {\r\n    cardPacks: Array<CardPackType>\r\n    cardPacksTotalCount: number // количество колод\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number // выбранная страница\r\n    pageCount: number // количество элементов на странице\r\n    min: number\r\n    max: number\r\n    searchQuery: string\r\n    sort: boolean\r\n}\r\n\r\n// type ThunkDispatch = Dispatch<ActionsType | ReturnType<typeof setAppStatusAC>>\r\ntype ActionsType = ReturnType<typeof setPacksData>\r\n    | ReturnType<typeof addNewPack>\r\n    | ReturnType<typeof deletePack>\r\n    | ReturnType<typeof updatePack>\r\n    | ReturnType<typeof setPage>\r\n    | ReturnType<typeof setPageCount>\r\n    | ReturnType<typeof setMinMaxValues>\r\n    | ReturnType<typeof setSearchQuery>\r\n    | ReturnType<typeof setPacksSortValue>","import { instance } from \"./auth-api\"\r\n\r\nexport const cardsApi = {\r\n    getCards(params: cardsParamsType) {\r\n        return instance.get<ResponseGetCardsType>(\"cards/card\", {params}).then(res => res.data)\r\n    },\r\n    postCard(card: RequestPostCardType) {\r\n        return instance.post<{ newCard: object }>('cards/card', {card}).then(res => res.data)\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete(`cards/card?id=${id}`).then(res => res.data)\r\n    },\r\n    updateCard(card: RequestUpdateCard) {\r\n        return instance.put<{ updateCard: object }>('cards/card', {card}).then(res => res.data)\r\n    },\r\n    updateGrade(grade: number, card_id: string) {\r\n        return instance.put<updatedGradeType>('cards/grade', {grade, card_id}).then(res => res.data)\r\n    },\r\n}\r\n\r\n//types\r\n\r\ntype CardsTypeType = 'card' | 'pack' | ''\r\n\r\nexport type CardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: CardsTypeType\r\n    more_id: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport type ResponseGetCardsType = {\r\n    cards: Array<CardType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\nexport type updatedGradeType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    card_id: string\r\n    user_id: string\r\n    grade: number\r\n    shots: number\r\n}\r\n\r\nexport type RequestPostCardType = {\r\n    answer?: string\r\n    question?: string\r\n    cardsPack_id: string\r\n    grade?: number\r\n    rating?: number\r\n    shots?: number\r\n    type?: CardsTypeType\r\n    answerImg?: string\r\n    questionImg?: string\r\n    answerVideo?: string\r\n    questionVideo?: string\r\n\r\n}\r\nexport type RequestUpdateCard = {\r\n    _id: string\r\n    question?: string // не обязательно\r\n    answer?: string\r\n    comments?: string // не обязателен\r\n\r\n}\r\n\r\nexport type cardsParamsType = {\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string\r\n    page?: number\r\n    pageCount?: number\r\n    cardsPack_id?: string\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n}\r\n","import {Dispatch} from \"redux\"\r\nimport {\r\n    cardsApi, cardsParamsType,\r\n    CardType,\r\n    RequestPostCardType,\r\n    RequestUpdateCard,\r\n    ResponseGetCardsType, updatedGradeType\r\n} from \"../../m3-dal/cards-api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../b0-store/redux-store\";\r\nimport {setAppStatusAC} from \"./app-reduser\";\r\n\r\nconst SET_CARDS = 'cards/SET-CARDS'\r\nconst ON_CHANGE_PRIVATE = 'cards/ON-CHANGE_PRIVATE'\r\nconst UPDATE_CARD_GRADE = 'cards/UPDATE_CARD_GRADE'\r\nconst SET_SEARCH_BY_QUESTION_QUERY = 'cards/SET-SEARCH-BY-QUESTION-QUERY'\r\nconst SET_SEARCH_BY_ANSWER_QUERY = 'cards/SET-SEARCH-BY-ANSWER-QUERY'\r\nconst SET_PAGE = 'cards/SET-PAGE'\r\nconst SET_PAGE_COUNT = 'cards/SET-PAGE-COUNT'\r\n\r\n\r\nconst initialState = {\r\n    cards: [{\r\n        answer: '',\r\n        question: '',\r\n        cardsPack_id: '',\r\n        grade: 0,\r\n        rating: 0,\r\n        shots: 0,\r\n        type: 'card',\r\n        user_id: '',\r\n        created: '',\r\n        updated: '',\r\n        __v: 0,\r\n        _id: '',\r\n    }] as Array<CardType>,\r\n\r\n    cardsTotalCount: 0,\r\n    maxGrade: 0,\r\n    minGrade: 0,\r\n    page: 0,\r\n    pageCount: 0,\r\n    packUserId: '',\r\n    privatCards: false,\r\n    SearchByQuestionQuery: \"\",\r\n    SearchByAnswerQuery: \"\",\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"cards/SET-CARDS\":\r\n            return {...state, ...action.cards}\r\n        case ON_CHANGE_PRIVATE:\r\n            return {\r\n                ...state,\r\n                privatCards: action.value\r\n            }\r\n        case SET_SEARCH_BY_QUESTION_QUERY:\r\n            return {\r\n                ...state,\r\n                SearchByQuestionQuery: action.value\r\n            }\r\n        case SET_SEARCH_BY_ANSWER_QUERY:\r\n            return {\r\n                ...state,\r\n                SearchByAnswerQuery: action.value\r\n            }\r\n        case UPDATE_CARD_GRADE:\r\n            const {card_id, grade, shots} = action.data;\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map(card => {\r\n                    if (card._id === card_id) {\r\n                        card.grade = grade;\r\n                        card.shots = shots;\r\n                    }\r\n                    return card;\r\n                })\r\n            }\r\n        case SET_PAGE:\r\n            return {...state, page: action.page}\r\n        case SET_PAGE_COUNT:\r\n            return {...state, pageCount: action.PageCount}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getCardsAC = (cards: ResponseGetCardsType) => ({type: SET_CARDS, cards} as const)\r\nexport const onChangePrivateAC = (value: boolean) => ({type: ON_CHANGE_PRIVATE, value} as const)\r\nexport const updateCardGradeAC = (data: updatedGradeType) => ({type: UPDATE_CARD_GRADE, data} as const)\r\n\r\n//search actions\r\nexport const setSearchByQuestionQuery = (value: string) =>\r\n    ({type: SET_SEARCH_BY_QUESTION_QUERY, value} as const)\r\n\r\nexport const setSearchByAnswerQuery = (value: string) =>\r\n    ({type: SET_SEARCH_BY_ANSWER_QUERY, value} as const)\r\n\r\n//pagination actions\r\nexport const setCardsPage = (page: number) =>\r\n    ({type: 'cards/SET-PAGE', page} as const)\r\n\r\nexport const setCardsPageCount = (PageCount: number) =>\r\n    ({type: 'cards/SET-PAGE-COUNT', PageCount} as const)\r\n\r\n// thunk\r\nexport const getCardsTC = (cardsPackId: string): ThunkType => async (dispatch: Dispatch, getState) => {\r\n    try {\r\n        const state = getState();\r\n\r\n        const params: cardsParamsType = {\r\n            page: state.cards.page,\r\n            pageCount: state.cards.pageCount,\r\n            cardsPack_id: cardsPackId,\r\n            cardAnswer: state.cards.SearchByAnswerQuery,\r\n            cardQuestion: state.cards.SearchByQuestionQuery,\r\n        };\r\n\r\n        dispatch(setAppStatusAC('loading'))\r\n        const data = await cardsApi.getCards(params)\r\n        dispatch(getCardsAC(data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        console.log('e:' + e)\r\n    }\r\n}\r\nexport const postCardsTC = (cardsPackId: string, question: string, answer: string): ThunkType => async (dispatch) => {\r\n    const postCard = {\r\n        cardsPack_id: cardsPackId,\r\n        answer: answer,\r\n        question: question\r\n\r\n    } as RequestPostCardType\r\n\r\n    try {\r\n        await cardsApi.postCard(postCard)\r\n\r\n        await dispatch(getCardsTC(cardsPackId))\r\n    } catch (e) {\r\n        console.log('e:' + e)\r\n    }\r\n}\r\n\r\nexport const deleteCardsTC = (cardsPackId: string, id: string): ThunkType => async (dispatch) => {\r\n\r\n    try {\r\n        await cardsApi.deleteCard(id)\r\n\r\n        await dispatch(getCardsTC(cardsPackId))\r\n    } catch (e) {\r\n        console.log('e:' + e)\r\n    }\r\n}\r\n\r\nexport const updateCardsTC = (cardsPackId: string, cardId: string,question: string, answer: string,): ThunkType => async (dispatch) => {\r\n    const updateCard = {\r\n        _id: cardId,\r\n        answer: answer,\r\n        question: question\r\n    } as RequestUpdateCard\r\n    try {\r\n        await cardsApi.updateCard(updateCard)\r\n\r\n        await dispatch(getCardsTC(cardsPackId))\r\n    } catch (e) {\r\n        console.log('e:' + e)\r\n    }\r\n}\r\n\r\nexport const updateGradeTC = (cardId: string, grade: number) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const data = await cardsApi.updateGrade(grade, cardId)\r\n        dispatch(updateCardGradeAC(data))\r\n\r\n    } catch (e) {\r\n        console.log('e:' + e)\r\n    }\r\n}\r\n\r\ntype ActionType = ReturnType<typeof getCardsAC>\r\n    | ReturnType<typeof onChangePrivateAC>\r\n    | ReturnType<typeof updateCardGradeAC>\r\n    | ReturnType<typeof setSearchByQuestionQuery>\r\n    | ReturnType<typeof setSearchByAnswerQuery>\r\n    | ReturnType<typeof setCardsPage>\r\n    | ReturnType<typeof setCardsPageCount>\r\n\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionType>","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport authReducer from \"../b1-reducers/auth-reducer\";\r\nimport {profileReducer} from \"../b1-reducers/profile-reducer\";\r\nimport {appReducer} from \"../b1-reducers/app-reduser\";\r\nimport {packsReducer} from \"../b1-reducers/packs-reducer\";\r\nimport {cardsReducer} from \"../b1-reducers/cards-reduser\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst reducers = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer\r\n});\r\n\r\nconst store = createStore(reducers, composeWithDevTools(\r\n    applyMiddleware(thunk)));\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Error404.module.css';\r\n\r\nexport const Error404 = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.rail}>\r\n                <div className={s.stamp + \" \" + s.four}>4</div>\r\n                <div className={s.stamp + \" \" + s.zero}>0</div>\r\n                <div className={s.stamp + \" \" + s.four}>4</div>\r\n                <div className={s.stamp + \" \" + s.zero}>0</div>\r\n                <div className={s.stamp + \" \" + s.four}>4</div>\r\n                <div className={s.stamp + \" \" + s.zero}>0</div>\r\n                <div className={s.stamp + \" \" + s.four}>4</div>\r\n                <div className={s.stamp + \" \" + s.zero}>0</div>\r\n                <div className={s.stamp + \" \" + s.four}>4</div>\r\n                <div className={s.stamp + \" \" + s.zero}>0</div>\r\n                <div className={s.stamp + \" \" + s.four}>4</div>\r\n                <div className={s.stamp + \" \" + s.zero}>0</div>\r\n                <div className={s.stamp + \" \" + s.four}>4</div>\r\n                <div className={s.stamp + \" \" + s.zero}>0</div>\r\n                <div className={s.stamp + \" \" + s.four}>4</div>\r\n                <div className={s.stamp + \" \" + s.zero}>0</div>\r\n                <div className={s.stamp + \" \" + s.four}>4</div>\r\n                <div className={s.stamp + \" \" + s.zero}>0</div>\r\n                <div className={s.stamp + \" \" + s.four}>4</div>\r\n                <div className={s.stamp + \" \" + s.zero}>0</div>\r\n            </div>\r\n            <div className={s.world}>\r\n                <div className={s.forward}>\r\n                    <div className={s.box}>\r\n                        <div className={s.wall}></div>\r\n                        <div className={s.wall}></div>\r\n                        <div className={s.wall}></div>\r\n                        <div className={s.wall}></div>\r\n                        <div className={s.wall}></div>\r\n                        <div className={s.wall}></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ForgotThunk} from \"../../../../m2-bll/b1-reducers/auth-reducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/b0-store/redux-store\";\r\n\r\ntype FormikInitialValueType = {\r\n    email: string\r\n}\r\nexport const PasswordRecovery = () => {\r\n    const dispatch = useDispatch()\r\n    const showCheckEmail = useSelector<AppRootStateType, boolean>((state => state.auth.showCheckEmail))\r\n\r\n    const formikForgotAuth = useFormik<FormikInitialValueType>({\r\n        initialValues: {\r\n            email: ''\r\n        },\r\n        validate: (values) => {\r\n            //@ts-ignore\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(ForgotThunk(values.email))\r\n            formikForgotAuth.resetForm()\r\n        },\r\n\r\n    })\r\n    if (showCheckEmail) {\r\n        return <Redirect to={'/check-on-email'}/>\r\n    }\r\n    return (\r\n        <div className=\"PasswordRecovery\">\r\n            <Grid item xs zeroMinWidth\r\n                  container\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\">\r\n                <Paper elevation={1} style={{\r\n                    padding: '20px',\r\n                    borderRadius: '5px',\r\n                    width: '300px',\r\n\r\n                    margin: '200px 0'\r\n                }}>\r\n                    <form onSubmit={formikForgotAuth.handleSubmit}>\r\n                        <FormControl>\r\n                            <FormLabel>\r\n                                <h1>IT-incubator</h1>\r\n                                <p>Forgot your password?</p>\r\n\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    {...formikForgotAuth.getFieldProps('email')}\r\n\r\n                                />\r\n                                {formikForgotAuth.touched.email && formikForgotAuth.errors.email\r\n                                    ? <div style={{color: 'red'}}>{formikForgotAuth.errors.email}</div>\r\n                                    : null}\r\n\r\n                                <p>Enter your email address and we will send you further instructions</p>\r\n                                <div>\r\n                                    <Button type={'submit'} onClick={() => {\r\n                                    }} variant={'contained'} color={'secondary'}\r\n                                            style={{\r\n                                                marginTop: '70px',\r\n                                                marginLeft: '100px',\r\n                                                borderRadius: '30px'\r\n                                            }}>Send Instructions</Button>\r\n                                </div>\r\n\r\n                                <p>Did you remember your password?</p>\r\n\r\n                                <Typography>\r\n\r\n                                    <Link href=\"#/login\" variant=\"body2\">\r\n                                        {'Try logging in'}\r\n                                    </Link>\r\n\r\n                                </Typography>\r\n\r\n                            </FormGroup>\r\n\r\n                        </FormControl>\r\n                    </form>\r\n                </Paper>\r\n            </Grid>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {FormikProps} from 'formik';\r\nimport {\r\n    Button,\r\n    FormControl,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    IconButton,\r\n    Input,\r\n    InputLabel,\r\n    Paper\r\n} from \"@material-ui/core\";\r\nimport {InitialValueType} from \"./NewPasswordContainer\";\r\nimport InputAdornment from '@material-ui/core/InputAdornment/InputAdornment';\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    formik: FormikProps<InitialValueType>\r\n    showPass: boolean\r\n    handleClickShowPassword: () => void\r\n}\r\n\r\nexport const NewPassword: React.FC<PropsType> = ({formik, showPass, handleClickShowPassword}) => {\r\n\r\n    return (\r\n        <Grid container justifyContent={\"center\"}>\r\n            <Paper elevation={1} style={{\r\n                padding: '20px',\r\n                borderRadius: '5px',\r\n                width: '300px',\r\n                height: '400px',\r\n                margin: '200px 0'\r\n            }}>\r\n                <Grid item xs={12}>\r\n                    <form onSubmit={formik.handleSubmit} >\r\n                        <FormControl>\r\n                            <FormLabel>\r\n                                <h2 style={{textAlign: 'center'}}>Sign up</h2>\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                {/*<TextField*/}\r\n                                {/*    type=\"password\"*/}\r\n                                {/*    label=\"Password\"*/}\r\n                                {/*    margin=\"normal\"*/}\r\n                                {/*    {...formik.getFieldProps('password')}*/}\r\n                                {/*/>*/}\r\n                                <FormControl >\r\n                                    <InputLabel htmlFor=\"standard-adornment-password\">Password</InputLabel>\r\n                                    <Input\r\n                                        id=\"standard-adornment-password\"\r\n                                        type={showPass ? 'text' : 'password'}\r\n                                        {...formik.getFieldProps('password')}\r\n                                        endAdornment={\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"toggle password visibility\"\r\n                                                    onClick={handleClickShowPassword}\r\n\r\n                                                >\r\n                                                    {showPass ? <Visibility /> : <VisibilityOff />}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        }\r\n                                    />\r\n                                </FormControl>\r\n                                {formik.touched.password && formik.errors.password &&\r\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                                <p>Create new password and we will send you further instructions to email</p>\r\n                                <div>\r\n                                    <Button type={'submit'} variant={'contained'} color={'secondary'}\r\n                                            style={{\r\n                                                marginTop: '70px',\r\n                                                marginLeft: '100px',\r\n                                                borderRadius: '30px'\r\n                                            }}>create new password</Button>\r\n                                </div>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {createNewPassThunk} from \"../../../../m2-bll/b1-reducers/auth-reducer\";\r\nimport {NewPassword} from \"./NewPassword\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/b0-store/redux-store\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\n\r\n\r\nexport const NewPasswordContainer: React.FC = () => {\r\n    const isNewPassword = useSelector<AppRootStateType, boolean>((state) => state.auth.isNewPassword)\r\n    const [showPass, setShowPass] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{ token: string }>();\r\n    const handleClickShowPassword = () => {\r\n\r\n        const c = !showPass\r\n        setShowPass(c)\r\n    }\r\n    const formik = useFormik<InitialValueType>({\r\n\r\n        initialValues: {\r\n\r\n            password: '',\r\n\r\n        },\r\n\r\n        validate: (values) => {\r\n            //@ts-ignore\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length > 11) {\r\n                errors.password = 'The length of password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(createNewPassThunk(values.password, token))\r\n            formik.resetForm()\r\n        },\r\n\r\n    })\r\n\r\n    if (!isNewPassword) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return (\r\n        <Container style={{maxHeight: '100%'}}>\r\n            <NewPassword formik={formik} showPass={showPass} handleClickShowPassword={handleClickShowPassword}/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport type InitialValueType = {\r\n    password: string\r\n\r\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {CSSProperties} from 'react';\r\n\r\ninterface IModal {\r\n    enableBackground?: boolean;\r\n    backgroundStyle?: CSSProperties;\r\n    backgroundOnClick?: () => void;\r\n\r\n    width: number;\r\n    height: number;\r\n    modalStyle?: CSSProperties;\r\n    modalOnClick?: () => void;\r\n\r\n    show: boolean\r\n}\r\n\r\nconst Modal: React.FC<IModal> = (\r\n    {\r\n        enableBackground,\r\n        backgroundStyle,\r\n        backgroundOnClick = () => {},\r\n\r\n        width,\r\n        height,\r\n        modalStyle,\r\n        modalOnClick = () => {},\r\n\r\n        show,\r\n        children,\r\n    }\r\n) => {\r\n    const top = `calc(50vh - ${height / 2}px)`;\r\n    const left = `calc(50vw - ${width / 2}px)`;\r\n\r\n    if (!show) return null;\r\n\r\n    return (\r\n        <>\r\n            {enableBackground && <div\r\n                style={{\r\n                    position: 'fixed',\r\n                    top: '0px',\r\n                    left: '0px',\r\n                    width: '100vw',\r\n                    height: '100vh',\r\n\r\n                    background: 'black',\r\n                    opacity: 0.35,\r\n                    zIndex: 20,\r\n\r\n                    ...backgroundStyle,\r\n                }}\r\n                onClick={backgroundOnClick}\r\n            />}\r\n            <div\r\n                style={{\r\n                    position: 'fixed',\r\n                    top,\r\n                    left,\r\n                    width,\r\n                    height,\r\n                    display: 'flex',\r\n                    flexFlow: 'column',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    padding: 20,\r\n                    background: 'mintcream',\r\n                    zIndex: 21,\r\n\r\n                    ...modalStyle,\r\n                }}\r\n                onClick={modalOnClick}\r\n            >\r\n                {children}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Modal;","import React from 'react';\r\nimport Modal from \"./Modal\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {editProfileTC} from \"../../../m2-bll/b1-reducers/profile-reducer\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\ntype UpdatePackModalContainerPropsType = {\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    profileName: string\r\n}\r\n\r\nexport const UpdateProfileModalContainer: React.FC<UpdatePackModalContainerPropsType> = ({show, setShow, profileName}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            avatarUrl: '',\r\n            profileName: profileName,\r\n        },\r\n        onSubmit: values => {\r\n            setShow(false)\r\n            dispatch(editProfileTC(values.profileName, values.avatarUrl))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                enableBackground={true}\r\n                backgroundOnClick={() => setShow(false)}\r\n                width={250}\r\n                height={250}\r\n                show={show}\r\n            >\r\n\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormGroup>\r\n                            <Grid container direction='column' spacing={3} alignItems='center'>\r\n                                <Grid item>\r\n                                    <TextField label=\"Enter new avatar URL\"\r\n                                               margin=\"normal\"\r\n                                               {...formik.getFieldProps(\"avatarUrl\")}/>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField label=\"Enter new name\"\r\n                                               margin=\"normal\"\r\n                                               {...formik.getFieldProps(\"profileName\")}/>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button type={'submit'} variant={'contained'} color='secondary'>Change</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport logo from '../../../../logo.svg';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/b0-store/redux-store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {ProfileDataType} from '../../../../m2-bll/b1-reducers/profile-reducer';\r\nimport {RequestStatusType} from \"../../../../m2-bll/b1-reducers/app-reduser\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport {UpdateProfileModalContainer} from \"../../f4-modals/UpdateProfileModalContainer\";\r\nimport {Avatar} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            height: '93vh',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n        },\r\n        paper: {\r\n            minWidth: 300,\r\n            padding: 20,\r\n        },\r\n        avatar: {\r\n            width: theme.spacing(35),\r\n            height: theme.spacing(35),\r\n        },\r\n    }),\r\n);\r\n\r\nexport const Profile: React.FC = () => {\r\n    const classes = useStyles();\r\n    const profile = useSelector<AppRootStateType, ProfileDataType>((state) => state.profile);\r\n    console.log('profile', profile)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const [showUpdateProfileModal, setShowUpdateProfileModal] = useState(false);\r\n    const updateProfileHandler = () => {\r\n        setShowUpdateProfileModal(true);\r\n    };\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <Container className={classes.root}>\r\n            {status === \"loading\" && <LinearProgress color=\"secondary\"/>}\r\n\r\n            <Paper className={classes.paper}>\r\n                <Grid container spacing={3} direction='column' justifyContent='center' alignItems='center'>\r\n                    <Grid item container justifyContent='flex-end'>\r\n                        <Grid item>\r\n                            <IconButton onClick={updateProfileHandler}><EditIcon/></IconButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Avatar alt='avatar' src={profile.avatar || logo} className={classes.avatar}/>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography variant=\"h6\" gutterBottom>Hello, {profile.name}!</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography variant=\"h6\" gutterBottom>You have <span style={{color: 'red', fontSize: '1.1em'}}>{profile.publicCardPacksCount}</span> packs!</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n\r\n            {showUpdateProfileModal &&\r\n            <UpdateProfileModalContainer show={showUpdateProfileModal} setShow={setShowUpdateProfileModal} profileName={profile.name}/>}\r\n        </Container>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {FormikProps} from 'formik';\r\nimport {\r\n    Button,\r\n    FormControl,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    IconButton,\r\n    Input,\r\n    InputLabel,\r\n    Paper,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport {InitialValueType} from \"./RegistrationContainer\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment/InputAdornment\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    formik: FormikProps<InitialValueType>\r\n    showPass1: boolean\r\n    handleClickShowPassword1: () => void\r\n    showPass2: boolean\r\n    handleClickShowPassword2: () => void\r\n}\r\n\r\nexport const Registration: React.FC<PropsType> = ({formik, showPass1, handleClickShowPassword1,\r\n                                                  showPass2, handleClickShowPassword2}) => {\r\n\r\n    return (\r\n        <Grid container justifyContent={\"center\"}>\r\n            <Paper elevation={1} style={{\r\n                padding: '20px',\r\n                borderRadius: '5px',\r\n                margin: '200px 0'\r\n            }}>\r\n                <Grid item xs={12}>\r\n\r\n\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormControl>\r\n                            <FormLabel>\r\n                                <h2 style={{textAlign: 'center'}}>Sign up</h2>\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    {...formik.getFieldProps('email')}\r\n                                />\r\n                                {formik.touched.email && formik.errors.email &&\r\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                                {/*<TextField*/}\r\n                                {/*    type=\"password\"*/}\r\n                                {/*    label=\"Password\"*/}\r\n                                {/*    margin=\"normal\"*/}\r\n                                {/*    {...formik.getFieldProps('password')}*/}\r\n                                {/*/>*/}\r\n                                <FormControl>\r\n                                    <InputLabel htmlFor=\"standard-adornment-password\">Password</InputLabel>\r\n                                    <Input\r\n                                        id=\"standard-adornment-password\"\r\n                                        type={showPass1 ? 'text' : 'password'}\r\n                                        {...formik.getFieldProps('password')}\r\n                                        endAdornment={\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"toggle password visibility\"\r\n                                                    onClick={handleClickShowPassword1}\r\n\r\n                                                >\r\n                                                    {showPass1 ? <Visibility/> : <VisibilityOff/>}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        }\r\n                                    />\r\n                                </FormControl>\r\n                                {formik.touched.password && formik.errors.password &&\r\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                                <FormControl>\r\n                                    <InputLabel htmlFor=\"standard-adornment-password\">Password</InputLabel>\r\n                                    <Input\r\n                                        id=\"standard-adornment-password\"\r\n                                        type={showPass2 ? 'text' : 'password'}\r\n                                        {...formik.getFieldProps('password2')}\r\n                                        endAdornment={\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"toggle password visibility\"\r\n                                                    onClick={handleClickShowPassword2}\r\n\r\n                                                >\r\n                                                    {showPass2 ? <Visibility/> : <VisibilityOff/>}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        }\r\n                                    />\r\n                                </FormControl>\r\n\r\n                                {formik.touched.password2 && formik.errors.password2 &&\r\n                                <div style={{color: 'red'}}>{formik.errors.password2}</div>}\r\n                                <div>\r\n                                    <Button type={'reset'} onClick={() => formik.resetForm()} variant={'contained'}\r\n                                            color={'secondary'}\r\n                                            style={{marginTop: '70px', borderRadius: '30px'}}>Reset</Button>\r\n                                    <Button type={'submit'} variant={'contained'} color={'secondary'}\r\n                                            style={{\r\n                                                marginTop: '70px',\r\n                                                marginLeft: '100px',\r\n                                                borderRadius: '30px'\r\n                                            }}>Confirm</Button>\r\n                                </div>\r\n\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/b0-store/redux-store\";\r\nimport {onRegisterTC} from '../../../../m2-bll/b1-reducers/auth-reducer';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Registration} from \"./Registration\";\r\nimport {Container} from \"@material-ui/core\";\r\n\r\n\r\nexport const RegistrationContainer: React.FC = () => {\r\n    const [showPass1, setShowPass1] = useState(false)\r\n    const [showPass2, setShowPass2] = useState(false)\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.auth.isRegistered)\r\n    const dispatch = useDispatch()\r\n    const handleClickShowPassword1 = () => {\r\n\r\n        setShowPass1(!showPass1)\r\n    }\r\n    const handleClickShowPassword2 = () => {\r\n\r\n        setShowPass2(!showPass2)\r\n    }\r\n    const formik = useFormik<InitialValueType>({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            password2: ''\r\n        } as InitialValueType,\r\n\r\n\r\n        validate: (values) => {\r\n            //@ts-ignore\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (\r\n                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n            ) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length > 11) {\r\n                errors.password = 'The length of password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n\r\n            if (values.password2 !== values.password) {\r\n                throw new Error('paas2 !== pass')\r\n            }\r\n\r\n            dispatch(onRegisterTC(values.email, values.password))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return (\r\n        <Container style={{maxHeight: '100%'}}>\r\n\r\n            <Registration formik={formik} showPass1={showPass1} handleClickShowPassword1={handleClickShowPassword1}\r\n                          showPass2={showPass2} handleClickShowPassword2={handleClickShowPassword2}/>\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport type InitialValueType = {\r\n    email: string\r\n    password: string\r\n    password2: string\r\n}\r\n","import React from 'react';\r\nimport s from './Login.module.css';\r\nimport {FormikProps} from \"formik\";\r\nimport {Link} from \"react-router-dom\";\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {FormikLoginInitValues} from \"./LoginContainer\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment/InputAdornment\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\n\r\ntype TProps = {\r\n    formik: FormikProps<FormikLoginInitValues>\r\n    showPass: boolean\r\n    handleClickShowPassword: () => void\r\n}\r\n\r\nexport const Login: React.FC<TProps> = ({formik,\r\n                                        showPass, handleClickShowPassword}) => {\r\n    console.log('login')\r\n    return <Grid container justifyContent=\"center\" alignItems=\"center\" className={s.container}>\r\n        <Grid item>\r\n            <Paper style={{padding: '15px'}}>\r\n                <h2>Sign In</h2>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormGroup className={s.formGroup}>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"email\")}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email ?\r\n                                <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n                            <FormControl >\r\n                                <InputLabel htmlFor=\"standard-adornment-password\">Password</InputLabel>\r\n                                <Input\r\n                                    id=\"standard-adornment-password\"\r\n                                    type={showPass ? 'text' : 'password'}\r\n                                    {...formik.getFieldProps('password')}\r\n                                    endAdornment={\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                aria-label=\"toggle password visibility\"\r\n                                                onClick={handleClickShowPassword}\r\n\r\n                                            >\r\n                                                {showPass ? <Visibility /> : <VisibilityOff />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    }\r\n                                />\r\n                            </FormControl>\r\n                            {formik.touched.password && formik.errors.password ?\r\n                                <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox\r\n                                    {...formik.getFieldProps(\"rememberMe\")}\r\n                                    checked={formik.values.rememberMe}\r\n                                />}\r\n                            />\r\n                            <div className={s.forgot}><Link to=\"/password-recovery\">Forgot Password</Link></div>\r\n                            <Button type='submit' variant='contained' color='secondary'\r\n                                    className={s.loginBtn}>Login</Button>\r\n                            <div className={s.singUpQ}><p>Don't have an account?</p></div>\r\n                            <div className={s.singUp}><Link to=\"/registration\">Sing Up</Link></div>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Paper>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/b0-store/redux-store\";\r\nimport {useFormik} from \"formik\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport { loginTC } from '../../../../m2-bll/b1-reducers/auth-reducer';\r\nimport {Login} from \"./Login\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress/LinearProgress\";\r\nimport {RequestStatusType} from \"../../../../m2-bll/b1-reducers/app-reduser\";\r\n\r\nexport type FormikLoginInitValues = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const LoginContainer: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const [showPass, setShowPass] = useState(false)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const status = useSelector((state: AppRootStateType): RequestStatusType => state.app.status)\r\n    const handleClickShowPassword = () => {\r\n\r\n        const c = !showPass\r\n        setShowPass(c)\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"daniok2021@lendi.com\",\r\n            password: \"qwezxc123\",\r\n            rememberMe: false\r\n        } as FormikLoginInitValues,\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (status === \"loading\") {\r\n        return <LinearProgress color={\"secondary\"}/>\r\n    }\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"packs-list\"}/>\r\n    }\r\n\r\n    return <Login formik={formik} showPass={showPass} handleClickShowPassword={handleClickShowPassword}/>\r\n}","import React from 'react'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/b0-store/redux-store\";\r\nimport {isShowCheckEmailAC} from \"../../../../m2-bll/b1-reducers/auth-reducer\";\r\nimport EmailTwoToneIcon from '@material-ui/icons/EmailTwoTone';\r\n\r\nexport const CheckOnEmail: React.FC = () => {\r\n\r\n    const email = useSelector<AppRootStateType, string>((state) => state.profile.email)\r\n\r\n    const dispatch = useDispatch()\r\n    const linkCallback = () => {\r\n        dispatch(isShowCheckEmailAC(false))\r\n    }\r\n    return (\r\n        <Grid container justifyContent={\"center\"}>\r\n            <Paper elevation={1} style={{\r\n                padding: '20px',\r\n                borderRadius: '5px',\r\n                width: '300px',\r\n                height: '200px',\r\n                margin: '200px 0'\r\n            }}>\r\n                <Grid container  direction='column' justifyContent=\"center\"\r\n                      alignItems=\"center\" >\r\n                <Grid item xs={5}>\r\n\r\n                    <Typography>\r\n\r\n                        <Link href={`mailto:${email}`} onClick={linkCallback} variant=\"body2\">\r\n                            <EmailTwoToneIcon style={{margin: '0 auto'}}/>\r\n\r\n                        </Link>\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={11}>\r\n                    <div>\r\n                        {`We've sent an Email with instructions to email: ${email}`}\r\n                    </div>\r\n\r\n                </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Modal from \"./Modal\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateCardPackTC} from \"../../../m2-bll/b1-reducers/packs-reducer\";\r\nimport {useFormik} from \"formik\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\ntype UpdatePackModalContainerPropsType = {\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    packId: string\r\n    packName: string\r\n}\r\n\r\ntype FormikErrorType = {\r\n    packName?: string\r\n}\r\n\r\nexport const UpdatePackModalContainer: React.FC<UpdatePackModalContainerPropsType> = ({show, setShow, packId, packName}) => {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            packName: packName,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.packName) {\r\n                errors.packName = 'name is required';\r\n            } else if (!/[A-Z]/i.test(values.packName)) {\r\n                errors.packName = 'Invalid name';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n\r\n            setShow(false)\r\n            dispatch(updateCardPackTC({_id: packId, name: values.packName}))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n            <Modal\r\n                enableBackground={true}\r\n                backgroundOnClick={() => setShow(false)}\r\n                width={200}\r\n                height={150}\r\n                show={show}\r\n            >\r\n\r\n                <form onSubmit={formik.handleSubmit}>\r\n\r\n                    <FormControl>\r\n                        <FormGroup>\r\n                            <Grid container direction='column' spacing={3} alignItems='center'>\r\n                                <Grid item>\r\n                                    <TextField label=\"Enter new pack name\"\r\n                                               margin=\"normal\"\r\n                                               {...formik.getFieldProps(\"packName\")}/>\r\n                                    {formik.touched.packName && formik.errors.packName ?\r\n                                        <div style={{color: \"red\"}}>{formik.errors.packName}</div> : null}\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button type={'submit'} variant={'contained'} color='secondary'>Change</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\r\n\r\ntype SortArrowProps = {\r\n    value: boolean\r\n}\r\n\r\nexport const SortArrow: React.FC<SortArrowProps> = ({value}) => {\r\n    if(value) return <ArrowDropUpIcon/>\r\n    else return <ArrowDropDownIcon/>\r\n}","import React from 'react';\r\nimport Modal from \"./Modal\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deleteCardPackTC} from \"../../../m2-bll/b1-reducers/packs-reducer\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\ntype DeletePackModalContainerPropsType = {\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    packId: string\r\n}\r\n\r\nexport const DeletePackModalContainer: React.FC<DeletePackModalContainerPropsType> = ({show, setShow, packId}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onCancel = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const onConfirm = () => {\r\n        setShow(false)\r\n        dispatch(deleteCardPackTC(packId))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                enableBackground={true}\r\n                backgroundOnClick={() => setShow(false)}\r\n                width={250}\r\n                height={120}\r\n\r\n                show={show}\r\n            >\r\n                <Typography variant=\"subtitle1\" gutterBottom>Are you sure you want to delete that pack?</Typography>\r\n                <Grid container direction='row' justifyContent='space-between'>\r\n                    <Grid item><Button variant={'contained'} color={'secondary'} onClick={onCancel}>Cancel</Button></Grid>\r\n                    <Grid item><Button variant={'contained'} color={'secondary'} onClick={onConfirm}>Confirm</Button></Grid>\r\n                </Grid>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n","import React, {useCallback, useState} from 'react';\r\nimport {createStyles, Theme, withStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    CardPackType,\r\n    setPacksSortValue,\r\n} from \"../../../../m2-bll/b1-reducers/packs-reducer\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/b0-store/redux-store\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {UpdatePackModalContainer} from \"../../f4-modals/UpdatePackModalContainer\";\r\nimport {SortArrow} from \"../p5-sort/SortArrow\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SchoolIcon from '@material-ui/icons/School';\r\nimport {DeletePackModalContainer} from \"../../f4-modals/DeletePackModalContainer\";\r\n\r\nexport const StyledTableCell = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        head: {\r\n            backgroundColor: theme.palette.primary.main,\r\n            color: theme.palette.common.white,\r\n        },\r\n        body: {\r\n            fontSize: 14,\r\n        },\r\n    }),\r\n)(TableCell);\r\n\r\nexport const StyledTableRow = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '&:nth-of-type(odd)': {\r\n                backgroundColor: theme.palette.action.hover,\r\n            },\r\n        },\r\n    }),\r\n)(TableRow);\r\n\r\ntype PacksTablePropsType = {\r\n    userId: string\r\n}\r\n\r\nexport default function PacksTable(props: PacksTablePropsType) {\r\n    const dispatch = useDispatch();\r\n\r\n    const sort = useSelector<AppRootStateType, boolean>(state => state.packs.sort);\r\n    const handleSortArrowClick = () => {\r\n        dispatch(setPacksSortValue(!sort));\r\n    }\r\n\r\n    const [showUpdatePackModal, setShowUpdatePackModal] = useState(false);\r\n    const [showDeletePackModal, setShowDeletePackModal] = useState(false);\r\n    const [currentPackData, setCurrentPackData] = useState([\"id\", \"name\"]);\r\n\r\n    const cardPacks = useSelector<AppRootStateType, Array<CardPackType>>(state => state.packs.cardPacks);\r\n\r\n    const deletePackHandler = useCallback((id: string) => {\r\n        setCurrentPackData([id])\r\n        setShowDeletePackModal(true)\r\n    }, [])\r\n\r\n    const updatePackHandler = useCallback((id: string, name: string) => {\r\n        setCurrentPackData([id, name])\r\n        setShowUpdatePackModal(true)\r\n    }, [])\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Name</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Cards</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">\r\n                            <IconButton color='inherit' onClick={handleSortArrowClick}><SortArrow value={sort}/></IconButton>\r\n                            Last Update\r\n                        </StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Created by</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Actions</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {cardPacks.map((pack) => (\r\n                        <StyledTableRow key={pack.updated.toString()}>\r\n                            <StyledTableCell component=\"th\" scope=\"row\">\r\n                                <Link to={`/cards-list/${pack.name}/${pack._id}`}><Button>{pack.name}</Button></Link>\r\n                            </StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{pack.cardsCount}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{pack.updated.toString().slice(0, 10)}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{pack.user_name}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">\r\n                                <IconButton onClick={() => deletePackHandler(pack._id)}\r\n                                        disabled={!(pack.user_id === props.userId)}><DeleteIcon/></IconButton>\r\n                                <IconButton onClick={() => updatePackHandler(pack._id, pack.name)}\r\n                                        disabled={!(pack.user_id === props.userId)}><EditIcon/></IconButton>\r\n                                <Link to={`/learn/${pack.name}/${pack._id}`}><IconButton><SchoolIcon/></IconButton></Link>\r\n                            </StyledTableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n\r\n            {showDeletePackModal &&\r\n            <DeletePackModalContainer\r\n                show={showDeletePackModal} setShow={setShowDeletePackModal}\r\n                packId={currentPackData[0]}\r\n            />}\r\n\r\n            {showUpdatePackModal &&\r\n            <UpdatePackModalContainer\r\n                show={showUpdatePackModal} setShow={setShowUpdatePackModal}\r\n                packId={currentPackData[0]} packName={currentPackData[1]}\r\n            />}\r\n\r\n        </TableContainer>\r\n    );\r\n}","import React from \"react\";\r\nimport {IconButton, InputBase, Paper} from \"@material-ui/core\";\r\nimport Search from '@material-ui/icons/Search'\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\ntype SearchProps = {\r\n    handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n    handleClick: () => void\r\n    handleEnter: (event: React.KeyboardEvent<HTMLButtonElement>) => void\r\n    placeholder: string\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            padding: 2,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n        },\r\n        input: {\r\n            marginLeft: 30,\r\n            flex: 1,\r\n        },\r\n        iconButton: {\r\n            padding: 10,\r\n            justifyContent: 'flex-end',\r\n        },\r\n    }),\r\n);\r\n\r\nexport const SearchInput: React.FC<SearchProps> = ({placeholder, handleChange, handleEnter, handleClick}) => {\r\n    const classes = useStyles();\r\n\r\n    return <div>\r\n        <Paper component={'form'} className={classes.root}>\r\n            <InputBase\r\n                className={classes.input}\r\n                onChange={handleChange}\r\n                placeholder={placeholder}\r\n                inputProps={{'aria-label': 'search'}}\r\n            />\r\n            <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search-icon\" onClick={handleClick} onKeyDown={handleEnter}>\r\n                <Search/>\r\n            </IconButton>\r\n        </Paper>\r\n    </div>\r\n}","import React from 'react';\r\nimport Modal from \"./Modal\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addCardPackTC} from \"../../../m2-bll/b1-reducers/packs-reducer\";\r\nimport {useFormik} from \"formik\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\ntype AddPackModalContainerPropsType = {\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    packName?: string\r\n}\r\n\r\nexport const AddPackModalContainer: React.FC<AddPackModalContainerPropsType> = ({show, setShow}) => {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            packName: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.packName) {\r\n                errors.packName = 'name is required';\r\n            } else if (!/[A-Z]/i.test(values.packName)) {\r\n                errors.packName = 'Invalid name';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n\r\n            setShow(false)\r\n            dispatch(addCardPackTC({name: values.packName}))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                enableBackground={true}\r\n                backgroundOnClick={() => setShow(false)}\r\n                width={200}\r\n                height={150}\r\n                show={show}\r\n            >\r\n\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormGroup>\r\n                            <Grid container direction='column' spacing={3} alignItems='center'>\r\n                                <Grid item>\r\n                                    <TextField label=\"Enter pack name\"\r\n                                               margin=\"normal\"\r\n                                               {...formik.getFieldProps(\"packName\")}/>\r\n                                    {formik.touched.packName && formik.errors.packName ?\r\n                                        <div style={{color: \"red\"}}>{formik.errors.packName}</div> : null}\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button type={'submit'} variant={'contained'} color={'secondary'}>add pack</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/b0-store/redux-store\";\r\nimport {onChangePrivateAC} from \"../../../../m2-bll/b1-reducers/cards-reduser\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\nexport default function MyPacksSetter() {\r\n    const dispatch = useDispatch();\r\n\r\n    const privatCards = useSelector<AppRootStateType, boolean>(state => state.cards.privatCards);\r\n\r\n    const privatCardsTrue = () => {\r\n        dispatch(onChangePrivateAC(true))\r\n    }\r\n    const privatCardsFalse = () => {\r\n        dispatch(onChangePrivateAC(false))\r\n    }\r\n\r\n    return (\r\n        <ButtonGroup disableElevation color=\"primary\">\r\n            <Button onClick={privatCardsTrue} disabled={privatCards}>My</Button>\r\n            <Button onClick={privatCardsFalse} disabled={!privatCards}>All</Button>\r\n        </ButtonGroup>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setMinMaxValues} from \"../../../../m2-bll/b1-reducers/packs-reducer\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/b0-store/redux-store\";\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 100,\r\n    },\r\n});\r\n\r\nexport default function RangeSlider() {\r\n    const dispatch = useDispatch();\r\n    const max = useSelector<AppRootStateType, number>(state => state.packs.max)\r\n    const min = useSelector<AppRootStateType, number>(state => state.packs.min)\r\n\r\n    const [value, setValue] = React.useState<number[]>([min, max]);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (event: any, newValue: number | number[]) => {\r\n        setValue(newValue as number[]);\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        dispatch(setMinMaxValues(value));\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography id=\"range-slider\" variant=\"caption\">\r\n                Min/Max cards\r\n            </Typography>\r\n\r\n            <Slider\r\n                onMouseUp={handleSearch}\r\n                value={value}\r\n                onChange={handleChange}\r\n                aria-labelledby=\"range-slider\"\r\n                valueLabelDisplay=\"auto\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PacksTable from \"../p3-tables/PacksTable\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/b0-store/redux-store\";\r\nimport {getCardPacksTC, setPage, setPageCount, setSearchQuery} from \"../../../../m2-bll/b1-reducers/packs-reducer\";\r\nimport {SearchInput} from \"../p2-search/Search\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {AddPackModalContainer} from \"../../f4-modals/AddPackModalContainer\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport MyPacksSetter from \"../p4-packsSettings/MyPacksSetter\";\r\nimport RangeSlider from \"../p4-packsSettings/RangeSlider\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            marginTop: 30,\r\n            marginBottom: 30,\r\n        },\r\n        paper: {\r\n            padding: 20,\r\n        },\r\n        pagination: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nexport const PacksList: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const classes = useStyles();\r\n\r\n    const page = useSelector<AppRootStateType, number>(state => state.packs.page);\r\n    const pageCount = useSelector<AppRootStateType, number>(state => state.packs.pageCount);\r\n    const searchQuery = useSelector<AppRootStateType, string>(state => state.packs.searchQuery);\r\n    const sort = useSelector<AppRootStateType, boolean>(state => state.packs.sort);\r\n\r\n    const max = useSelector<AppRootStateType, number>(state => state.packs.max)\r\n    const min = useSelector<AppRootStateType, number>(state => state.packs.min)\r\n\r\n    const privatCards = useSelector<AppRootStateType, boolean>(state => state.cards.privatCards)\r\n    const userId = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardPacksTC());\r\n    }, [dispatch, privatCards, min, max, page, pageCount, searchQuery, sort]);\r\n\r\n    const [showAddPackModal, setShowAddPackModal] = useState(false);\r\n\r\n    //search\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(event.target.value);\r\n    }\r\n\r\n    const handleClick = () => {\r\n        dispatch(setSearchQuery(inputValue));\r\n    }\r\n\r\n    const handleEnter = (event: React.KeyboardEvent<HTMLButtonElement>) => {\r\n        if (event.key === 'Enter') {\r\n            dispatch(setSearchQuery(inputValue));\r\n        }\r\n    }\r\n\r\n    //pagination\r\n    const cardPacksTotalCount = useSelector<AppRootStateType, number>(state => state.packs.cardPacksTotalCount);\r\n\r\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        dispatch(setPage(newPage + 1));\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (\r\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    ) => {\r\n        dispatch(setPageCount(parseInt(event.target.value, 10)));\r\n        dispatch(setPage(0));\r\n    };\r\n\r\n    const addPackHandler = useCallback(() => {\r\n        setShowAddPackModal(true)\r\n    }, [])\r\n\r\n    return (\r\n        <Container className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item container alignItems='center' >\r\n                        <Grid item xs={2}><Button variant=\"contained\" color=\"secondary\" onClick={addPackHandler}>Add Pack</Button></Grid>\r\n                        <Grid item xs={2}><MyPacksSetter/></Grid>\r\n                        <Grid item xs={2}><RangeSlider/></Grid>\r\n                        <Grid item xs={6}>\r\n                            <SearchInput placeholder=\"Search pack by name..\" handleClick={handleClick}\r\n                                         handleEnter={handleEnter}\r\n                                         handleChange={handleChange}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}><PacksTable userId={userId}/></Grid>\r\n                    <Grid item xs={12} className={classes.pagination}>\r\n                        <TablePagination\r\n                            component=\"div\"\r\n                            count={cardPacksTotalCount}\r\n                            page={page - 1}\r\n                            onPageChange={handleChangePage}\r\n                            rowsPerPage={pageCount}\r\n                            onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n\r\n            {showAddPackModal &&\r\n            <AddPackModalContainer show={showAddPackModal} setShow={setShowAddPackModal}/>}\r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Modal from \"./Modal\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {updateCardsTC} from \"../../../m2-bll/b1-reducers/cards-reduser\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\ntype UpdateCardsModalContainerPropsType = {\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    cardsPackId: string\r\n    cardId: string\r\n}\r\n\r\ntype FormikErrorType = {\r\n    question?: string\r\n    answer?: string\r\n}\r\n\r\nexport const UpdateCardsModalContainer: React.FC<UpdateCardsModalContainerPropsType> = (\r\n    {show, setShow, cardsPackId, cardId}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            question: '',\r\n            answer: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.question) {\r\n                errors.question = 'name is required';\r\n            } else if (!/[A-Z]/i.test(values.question)) {\r\n                errors.question = 'Invalid name';\r\n            }\r\n            if (!values.answer) {\r\n                errors.answer = 'name is required';\r\n            } else if (!/[A-Z]/i.test(values.answer)) {\r\n                errors.answer = 'Invalid name';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n\r\n            setShow(false)\r\n            dispatch(updateCardsTC(cardsPackId, cardId, values.question, values.answer))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                enableBackground={true}\r\n                backgroundOnClick={() => setShow(false)}\r\n                width={180}\r\n                height={200}\r\n                show={show}\r\n            >\r\n\r\n                <form onSubmit={formik.handleSubmit}>\r\n\r\n                    <FormControl>\r\n                        <FormGroup>\r\n                            <Grid container direction='column' spacing={1} alignItems='center'>\r\n                                <Grid item>\r\n                                    <TextareaAutosize minRows={3} placeholder=\"enter question\"\r\n                                                       {...formik.getFieldProps(\"question\")}/>\r\n                                    {formik.touched.question && formik.errors.question ?\r\n                                        <div style={{color: \"red\"}}>{formik.errors.question}</div> : null}\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextareaAutosize minRows={3} placeholder=\"enter answer\"\r\n                                                       {...formik.getFieldProps(\"answer\")}/>\r\n                                    {formik.touched.answer && formik.errors.answer ?\r\n                                        <div style={{color: \"red\"}}>{formik.errors.answer}</div> : null}\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button type={'submit'} variant={'contained'} color={'secondary'}>update card</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport Modal from \"./Modal\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deleteCardsTC} from \"../../../m2-bll/b1-reducers/cards-reduser\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\ntype DeletePackModalContainerPropsType = {\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    cardId: string\r\n    packId: string\r\n}\r\n\r\nexport const DeleteCardModalContainer: React.FC<DeletePackModalContainerPropsType> = ({show, setShow, cardId, packId}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onCancel = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const onConfirm = () => {\r\n        setShow(false)\r\n        dispatch(deleteCardsTC(packId, cardId))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                enableBackground={true}\r\n                backgroundOnClick={() => setShow(false)}\r\n                width={250}\r\n                height={120}\r\n                show={show}\r\n            >\r\n                <Typography variant=\"subtitle1\" gutterBottom>Are you sure you want to delete that card?</Typography>\r\n                <Grid container direction='row' justifyContent='space-between'>\r\n                    <Grid item><Button variant={'contained'} color={'secondary'} onClick={onCancel}>Cancel</Button></Grid>\r\n                    <Grid item><Button variant={'contained'} color={'secondary'} onClick={onConfirm}>Confirm</Button></Grid>\r\n                </Grid>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n","import React, {useCallback, useState} from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/b0-store/redux-store\";\r\nimport {StyledTableCell, StyledTableRow} from './PacksTable';\r\nimport {CardType} from \"../../../../m3-dal/cards-api\";\r\nimport {UpdateCardsModalContainer} from \"../../f4-modals/UpdateCardsModalContainer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { DeleteCardModalContainer } from '../../f4-modals/DeleteCardModalContainer';\r\n\r\nexport default function CardsTable() {\r\n    const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cards.cards);\r\n    const [showUpdateCardsModal, setShowUpdateCardsModal] = useState(false);\r\n    const [showDeleteCardModal, setShowDeleteCardModal] = useState(false);\r\n    const [currentCardData, setCurrentCardData] = useState([\"id\", \"packId\"]);\r\n\r\n    const deleteCardHandler = useCallback((id: string, packId: string) => {\r\n        setCurrentCardData([id, packId])\r\n        setShowDeleteCardModal(true)\r\n    }, [])\r\n\r\n    const updateCardHandler = useCallback((id: string, packId: string) => {\r\n        setCurrentCardData([id, packId]);\r\n        setShowUpdateCardsModal(true)\r\n    }, [])\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Question</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Answer</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Last Update</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Grade</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Actions</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {cards.map((card) => (\r\n                        <StyledTableRow key={card.updated.toString()}>\r\n                            <StyledTableCell component=\"th\" scope=\"row\">{card.question}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{card.answer}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{card.updated.toString().slice(0, 10)}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{card.grade}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">\r\n                                <IconButton onClick={() => deleteCardHandler(card._id, card.cardsPack_id)}><DeleteIcon/></IconButton>\r\n                                <IconButton onClick={() => updateCardHandler(card._id, card.cardsPack_id)}><EditIcon/></IconButton>\r\n                            </StyledTableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n\r\n            {showDeleteCardModal &&\r\n            <DeleteCardModalContainer\r\n                show={showDeleteCardModal} setShow={setShowDeleteCardModal}\r\n                packId={currentCardData[1]} cardId={currentCardData[0]}\r\n            />}\r\n\r\n            {showUpdateCardsModal &&\r\n            <UpdateCardsModalContainer\r\n                show={showUpdateCardsModal} setShow={setShowUpdateCardsModal}\r\n                cardId={currentCardData[0]} cardsPackId={currentCardData[1]}\r\n            />}\r\n        </TableContainer>\r\n    );\r\n}","import React from 'react';\r\nimport Modal from \"./Modal\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {postCardsTC} from \"../../../m2-bll/b1-reducers/cards-reduser\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\ntype AddCardsModalContainerPropsType = {\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    question?: string\r\n    answer?: string\r\n}\r\n\r\nexport const AddCardsModalContainer: React.FC<AddCardsModalContainerPropsType> = ({show, setShow}) => {\r\n    const dispatch = useDispatch()\r\n    const {id} = useParams<{id: string, name: string}>()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            question: '',\r\n            answer: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.question) {\r\n                errors.question = 'name is required';\r\n            } else if (!/[A-Z]/i.test(values.question)) {\r\n                errors.question = 'Invalid name';\r\n            }\r\n            if (!values.answer) {\r\n                errors.answer = 'name is required';\r\n            } else if (!/[A-Z]/i.test(values.answer)) {\r\n                errors.answer = 'Invalid name';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n\r\n            setShow(false)\r\n            dispatch(postCardsTC(id, values.question, values.answer))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n            <Modal\r\n                enableBackground={true}\r\n                backgroundOnClick={() => setShow(false)}\r\n                width={180}\r\n                height={200}\r\n                show={show}\r\n            >\r\n\r\n                <form onSubmit={formik.handleSubmit}>\r\n\r\n                    <FormControl>\r\n                        <FormGroup>\r\n                            <Grid container direction='column' spacing={1} alignItems='center'>\r\n                                <Grid item>\r\n                                    <TextareaAutosize minRows={3} placeholder=\"enter question\"\r\n                                                      {...formik.getFieldProps(\"question\")}/>\r\n                                    {formik.touched.question && formik.errors.question ?\r\n                                        <div style={{color: \"red\"}}>{formik.errors.question}</div> : null}\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextareaAutosize minRows={3} placeholder=\"enter answer\"\r\n                                                      {...formik.getFieldProps(\"answer\")}/>\r\n                                    {formik.touched.answer && formik.errors.answer ?\r\n                                        <div style={{color: \"red\"}}>{formik.errors.answer}</div> : null}\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button type={'submit'} variant={'contained'} color={'secondary'}>add card</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport CardsTable from \"../p3-tables/CardsTable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/b0-store/redux-store\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport {\r\n    getCardsTC,\r\n    setCardsPage,\r\n    setCardsPageCount,\r\n    setSearchByAnswerQuery,\r\n    setSearchByQuestionQuery,\r\n} from \"../../../../m2-bll/b1-reducers/cards-reduser\";\r\nimport {SearchInput} from \"../p2-search/Search\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {AddCardsModalContainer} from \"../../f4-modals/AddCardsModalContainer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            marginTop: 30,\r\n            marginBottom: 30,\r\n        },\r\n        paper: {\r\n            padding: 20,\r\n        },\r\n        pagination: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nexport const CardsList: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles();\r\n    const page = useSelector<AppRootStateType, number>(state => state.cards.page);\r\n    const pageCount = useSelector<AppRootStateType, number>(state => state.cards.pageCount);\r\n    const SearchByQuestionQuery = useSelector<AppRootStateType, string>(state => state.cards.SearchByQuestionQuery);\r\n    const SearchByAnswerQuery = useSelector<AppRootStateType, string>(state => state.cards.SearchByAnswerQuery);\r\n\r\n    const {id, name} = useParams<{id: string, name: string}>(); //current pack data\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardsTC(id))\r\n    }, [dispatch, id, SearchByQuestionQuery, SearchByAnswerQuery, page, pageCount])\r\n\r\n    //search\r\n    const [inputQuestionValue, setInputQuestionValue] = useState(\"\");\r\n    const [inputAnswerValue, setInputAnswerValue] = useState(\"\");\r\n\r\n    const handleSearchByQuestionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputQuestionValue(event.target.value);\r\n    }\r\n\r\n    const handleSearchByQuestionClick = () => {\r\n        dispatch(setSearchByQuestionQuery(inputQuestionValue));\r\n    }\r\n\r\n    const handleSearchByQuestionEnter = (event: React.KeyboardEvent<HTMLButtonElement>) => {\r\n        if (event.key === 'Enter') {\r\n            dispatch(setSearchByQuestionQuery(inputQuestionValue));\r\n        }\r\n    }\r\n\r\n    const handleSearchByAnswerChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputAnswerValue(event.target.value);\r\n    }\r\n\r\n    const handleSearchByAnswerClick = () => {\r\n        dispatch(setSearchByAnswerQuery(inputAnswerValue));\r\n    }\r\n\r\n    const handleSearchByAnswerEnter = (event: React.KeyboardEvent<HTMLButtonElement>) => {\r\n        if (event.key === 'Enter') {\r\n            dispatch(setSearchByAnswerQuery(inputAnswerValue));\r\n        }\r\n    }\r\n\r\n    //pagination\r\n    const cardsTotalCount = useSelector<AppRootStateType, number>(state => state.cards.cardsTotalCount);\r\n\r\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        dispatch(setCardsPage(newPage + 1));\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (\r\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    ) => {\r\n        dispatch(setCardsPageCount(parseInt(event.target.value, 10)));\r\n        dispatch(setCardsPage(0));\r\n    };\r\n\r\n    const [showAddCardsModal, setShowAddCardsModal] = useState(false);\r\n    const packUserId = useSelector<AppRootStateType, string>(state => state.cards.packUserId);\r\n    const userId = useSelector<AppRootStateType, string>(state => state.profile._id);\r\n\r\n    const addCardHandler = useCallback(() => {\r\n        setShowAddCardsModal(true)\r\n    }, [])\r\n\r\n    return (\r\n        <Container className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item container justifyContent='space-between'>\r\n                        <Grid item>\r\n                            <Link to='/packs-list'><IconButton><ArrowBackIcon style={{fontSize: 30}}/></IconButton></Link>\r\n                        </Grid>\r\n                        <Grid item><Typography variant=\"h4\">{name}</Typography></Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container spacing={4} alignItems='center'>\r\n                        <Grid item xs={2}>\r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={addCardHandler} disabled={!(userId === packUserId)}>Add Card</Button>\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                            <SearchInput placeholder=\"Search card by question..\"\r\n                                         handleChange={handleSearchByQuestionChange}\r\n                                         handleClick={handleSearchByQuestionClick}\r\n                                         handleEnter={handleSearchByQuestionEnter}/>\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                            <SearchInput placeholder=\"Search card by answer..\" handleEnter={handleSearchByAnswerEnter}\r\n                                         handleClick={handleSearchByAnswerClick}\r\n                                         handleChange={handleSearchByAnswerChange}/>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}><CardsTable/></Grid>\r\n                    <Grid item xs={12} className={classes.pagination}>\r\n                        <TablePagination\r\n                            component=\"div\"\r\n                            count={cardsTotalCount}\r\n                            page={page - 1}\r\n                            onPageChange={handleChangePage}\r\n                            rowsPerPage={pageCount}\r\n                            onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n\r\n            {showAddCardsModal &&\r\n            <AddCardsModalContainer show={showAddCardsModal} setShow={setShowAddCardsModal}/>}\r\n        </Container>\r\n    );\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {CardType} from \"../../../m3-dal/cards-api\";\r\nimport {AppRootStateType} from \"../../../m2-bll/b0-store/redux-store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport {getCardsTC, updateGradeTC} from \"../../../m2-bll/b1-reducers/cards-reduser\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nconst getCard = (cards: CardType[]) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n        const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n        return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n    }, {sum: 0, id: -1});\r\n    console.log('test: ', sum, rand, res)\r\n\r\n    return cards[res.id + 1];\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            height: '93vh',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n        },\r\n        paper: {\r\n            maxWidth: 350,\r\n            padding: 20,\r\n        },\r\n    }),\r\n);\r\n\r\nconst LearnPage: React.FC = () => {\r\n    const classes = useStyles();\r\n    const [isChecked, setIsChecked] = useState<boolean>(false);\r\n    const [first, setFirst] = useState<boolean>(true);\r\n    const {cards} = useSelector((store: AppRootStateType) => store.cards);\r\n    const {id, name} = useParams<{ id: string, name: string }>(); // current pack data\r\n\r\n    let grade: number;\r\n\r\n    const [card, setCard] = useState<CardType>({\r\n        _id: 'fake',\r\n        __v: 0,\r\n        cardsPack_id: '',\r\n\r\n        answer: 'answer fake',\r\n        question: 'question fake',\r\n        grade: 0,\r\n        shots: 0,\r\n        user_id: '',\r\n        type: '',\r\n        rating: 0,\r\n        more_id: '',\r\n        created: '',\r\n        updated: '',\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        console.log('LearnContainer useEffect');\r\n\r\n        if (first) {\r\n            dispatch(getCardsTC(id));\r\n            setFirst(false);\r\n        }\r\n\r\n        console.log('cards', cards)\r\n        if (cards.length > 0) setCard(getCard(cards));\r\n\r\n        return () => {\r\n            console.log('LearnContainer useEffect off');\r\n        }\r\n    }, [dispatch, id, cards, first]);\r\n\r\n    const onNext = () => {\r\n        setIsChecked(false);\r\n\r\n        if (cards.length > 0) {\r\n            dispatch(updateGradeTC(card._id, grade));\r\n            setCard(getCard(cards));\r\n        }\r\n    }\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n        grade = +event.target.value;\r\n    };\r\n\r\n    return (\r\n        <Container className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <Grid container spacing={2}>\r\n\r\n                    <Grid item container justifyContent='space-between' alignItems='center'>\r\n                        <Grid item>\r\n                            <Link to='/packs-list'><IconButton><ArrowBackIcon\r\n                                style={{fontSize: 30}}/></IconButton></Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"h5\" gutterBottom>Learn \"{name}\"</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container direction='column' spacing={3}>\r\n                        <Grid item>\r\n                            <Typography variant=\"subtitle1\" gutterBottom>Question: \"{card.question}\"</Typography>\r\n                        </Grid>\r\n                            {isChecked || (\r\n                                <Grid item>\r\n                                    <Button onClick={() => setIsChecked(true)}>Check</Button>\r\n                                </Grid>\r\n                            )}\r\n\r\n                            {isChecked && (\r\n                                <>\r\n                                    <Grid item>\r\n                                        <Typography variant=\"subtitle1\" gutterBottom>Answer: \"{card.answer}\"</Typography>\r\n                                    </Grid>\r\n\r\n                                    <Grid item container direction='column' alignItems='center' spacing={2}>\r\n                                    <Grid item>\r\n                                        <FormControl component=\"fieldset\">\r\n                                            <FormLabel component=\"legend\">Rate yourself:</FormLabel>\r\n                                            <RadioGroup defaultValue=\"1\" aria-label=\"grade\" name=\"grade\" onChange={handleChange}>\r\n                                                <FormControlLabel value=\"1\" control={<Radio color=\"primary\"/>} label=\"Didn't know\"/>\r\n                                                <FormControlLabel value=\"2\" control={<Radio color=\"primary\"/>} label=\"Forgot\"/>\r\n                                                <FormControlLabel value=\"3\" control={<Radio color=\"primary\"/>}\r\n                                                                  label=\"A lot of thought\"/>\r\n                                                <FormControlLabel value=\"4\" control={<Radio color=\"primary\"/>} label=\"Confused\"/>\r\n                                                <FormControlLabel value=\"5\" control={<Radio color=\"primary\"/>}\r\n                                                                  label=\"Knew the answer\"/>\r\n                                            </RadioGroup>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n\r\n                                    <Grid item>\r\n                                        <Button onClick={onNext} color='primary' variant='contained'>Next</Button>\r\n                                    </Grid>\r\n                                    </Grid>\r\n                                </>\r\n                            )}\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default LearnPage;","import React from 'react';\r\nimport {Error404} from \"../n4-features/f0-404/Error404\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {PasswordRecovery} from \"../n4-features/f1-auth/a3-passwordRecovery/PasswordRecovery\";\r\nimport {NewPasswordContainer} from \"../n4-features/f1-auth/a4-NewPassword/NewPasswordContainer\";\r\nimport {Profile} from \"../n4-features/f1-auth/a5-profile/Profile\";\r\nimport {RegistrationContainer} from \"../n4-features/f1-auth/a2-registration/RegistrationContainer\";\r\nimport {LoginContainer} from \"../n4-features/f1-auth/a1-login/LoginContainer\";\r\nimport {CheckOnEmail} from \"../n4-features/f1-auth/a3-passwordRecovery/CheckOnEmail\";\r\nimport {PacksList} from \"../n4-features/f2-packsList/p1-pages/PacksList\";\r\nimport {CardsList} from \"../n4-features/f2-packsList/p1-pages/CardsList\";\r\nimport LearnPage from \"../n4-features/f3-learning/LearnPage\";\r\n\r\nexport const PATH = {\r\n        LOGIN: '/login',\r\n        REGISTRATION: '/registration',\r\n        PROFILE: '/profile',\r\n        PASSWORD_RECOVERY: '/password-recovery',\r\n        NEW_PASSWORD: '/set-new-password/:token',\r\n        PACKS_LIST: '/packs-list',\r\n        CARDS: '/cards-list/:name/:id',\r\n        LEARN: '/learn/:name/:id',\r\n        CHECK_EMAIL: '/check-on-email',\r\n        ERROR_404: '/404',\r\n}\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <Switch>\r\n                <Route exact path=\"/\" strict render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <LoginContainer/>}/>\r\n                <Route path={PATH.PACKS_LIST} render={() => <PacksList/>}/>\r\n\r\n                <Route path={PATH.CARDS} render={() => <CardsList/>}/>\r\n                <Route path={PATH.LEARN} render={() => <LearnPage/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n\r\n                <Route path={PATH.REGISTRATION} render={() => <RegistrationContainer/>}/>\r\n                <Route path={PATH.PASSWORD_RECOVERY} render={() => <PasswordRecovery/>}/>\r\n                <Route path={PATH.NEW_PASSWORD} render={() => <NewPasswordContainer/>}/>\r\n\r\n                <Route path={PATH.ERROR_404} render={() => <Error404/>}/>\r\n                <Route path={PATH.CHECK_EMAIL} render={() => <CheckOnEmail/>}/>\r\n                <Redirect from=\"*\" to={PATH.ERROR_404}/>\r\n        </Switch>\r\n    );\r\n}\r\n","import React, {useCallback} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/b0-store/redux-store\";\r\nimport {logoutTC} from \"../../m2-bll/b1-reducers/auth-reducer\";\r\nimport {RequestStatusType} from \"../../m2-bll/b1-reducers/app-reduser\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport {PATH} from \"../n3-routes/Routes\";\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {ProfileDataType} from \"../../m2-bll/b1-reducers/profile-reducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nexport const Header = () => {\r\n    const classes = useStyles();\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    const profile = useSelector<AppRootStateType, ProfileDataType>((state) => state.profile);\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC());\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Memocards\r\n                    </Typography>\r\n                    {isLoggedIn &&\r\n                    <div>\r\n                        <Button\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls=\"menu-appbar\"\r\n                            aria-haspopup=\"true\"\r\n                            startIcon={<AccountCircle/>}\r\n                            color=\"inherit\"\r\n                            disabled={status === \"loading\"}\r\n                            onClick={handleMenu}>{profile.name}\r\n                        </Button>\r\n                        <Menu\r\n                            id=\"menu-appbar\"\r\n                            anchorEl={anchorEl}\r\n                            anchorOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            keepMounted\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                        >\r\n                            <NavLink to={PATH.PROFILE}><MenuItem onClick={handleClose}>Profile</MenuItem></NavLink>\r\n                            <NavLink to={PATH.PACKS_LIST}><MenuItem onClick={handleClose}>Pack List</MenuItem></NavLink>\r\n                            <NavLink to={PATH.LOGIN}><MenuItem onClick={() => {\r\n                                handleClose();\r\n                                logoutHandler();\r\n                            }}>Log Out</MenuItem></NavLink>\r\n                        </Menu>\r\n                    </div>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/b0-store/redux-store\";\r\nimport {setAppErrorAC} from \"../../m2-bll/b1-reducers/app-reduser\";\r\n\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector((state:AppRootStateType): string | null => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {Header} from \"../n2-header/Header\";\r\nimport {Routes} from \"../n3-routes/Routes\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initializeAppTC, RequestStatusType} from \"../../m2-bll/b1-reducers/app-reduser\";\r\nimport {ErrorSnackbar} from \"../n0-errorSnackbar/ErrorSnackbar\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress/LinearProgress';\r\nimport {AppRootStateType} from '../../m2-bll/b0-store/redux-store';\r\n\r\nexport const App = () => {\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\r\n    const status = useSelector((state: AppRootStateType): RequestStatusType => state.app.status);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n            dispatch(initializeAppTC());\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <LinearProgress color={\"secondary\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <Header/>\r\n            {status === \"loading\" && <LinearProgress color=\"secondary\"/>}\r\n            <Routes/>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from \"./m2-bll/b0-store/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\nimport {App} from \"./m1-ui/n1-app/App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {createTheme, MuiThemeProvider} from \"@material-ui/core\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#24272a',\r\n            dark: '#191b1d',\r\n            light: '#4f5254',\r\n        },\r\n        secondary: {\r\n            main: '#ffc400',\r\n            dark: '#b28900',\r\n            light: '#ffcf33',\r\n        }\r\n    }\r\n})\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <MuiThemeProvider theme={theme}>\r\n                    <App/>\r\n                </MuiThemeProvider>\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__275LG\",\"formGroup\":\"Login_formGroup__12IZe\",\"loginBtn\":\"Login_loginBtn__1rW8i\",\"forgot\":\"Login_forgot__3BhTY\",\"singUpQ\":\"Login_singUpQ__rSVDC\",\"singUp\":\"Login_singUp__o-Pgm\"};"],"sourceRoot":""}